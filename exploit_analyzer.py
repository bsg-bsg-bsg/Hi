#!/usr/bin/env python3
"""
Deep analysis of Lumber Tycoon 2 code to identify potential exploits
"""

import os
import re
from pathlib import Path
from collections import defaultdict

def analyze_exploits(root_dir):
    """Analyze the codebase for potential exploits and vulnerabilities"""
    
    root_path = Path(root_dir)
    lua_files = list(root_path.rglob("*.lua"))
    
    print("=== LUMBER TYCOON 2 EXPLOIT ANALYSIS ===")
    print(f"Analyzing {len(lua_files)} files for potential exploits...\n")
    
    exploits = {
        'remote_events': [],
        'remote_functions': [],
        'client_validation': [],
        'money_systems': [],
        'item_systems': [],
        'teleport_systems': [],
        'speed_systems': [],
        'tool_systems': [],
        'save_load_systems': [],
        'admin_systems': [],
        'gui_systems': [],
        'interaction_systems': [],
        'property_systems': [],
        'wire_systems': [],
        'blueprint_systems': []
    }
    
    # Patterns to look for
    patterns = {
        'RemoteEvent': r'(\w+RemoteEvent|\w+Remote)',
        'RemoteFunction': r'(\w+RemoteFunction|\w+Function)',
        'InvokeServer': r'(\w+):InvokeServer\((.*?)\)',
        'FireServer': r'(\w+):FireServer\((.*?)\)',
        'Money': r'(Money|Cash|Funds|Currency|\$)',
        'Speed': r'(WalkSpeed|Speed|Velocity)',
        'Teleport': r'(CFrame|Position|Teleport)',
        'Tool': r'(Tool|Axe|Equipment)',
        'Admin': r'(Admin|Mod|Owner|zebraman)',
        'Save': r'(Save|Load|Slot)',
        'Property': r'(Property|Land|Plot)',
        'Wire': r'(Wire|Electric|Power)',
        'Blueprint': r'(Blueprint|Build|Structure)'
    }
    
    for file_path in lua_files:
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                relative_path = file_path.relative_to(root_path)
                
                # Find RemoteEvents and RemoteFunctions
                remote_events = re.findall(r'(\w+RemoteEvent|\w+Remote)', content)
                remote_functions = re.findall(r'(\w+RemoteFunction|\w+Function)', content)
                
                # Find server invocations
                invoke_server = re.findall(r'(\w+):InvokeServer\((.*?)\)', content)
                fire_server = re.findall(r'(\w+):FireServer\((.*?)\)', content)
                
                if remote_events:
                    exploits['remote_events'].append({
                        'file': str(relative_path),
                        'events': remote_events
                    })
                
                if remote_functions:
                    exploits['remote_functions'].append({
                        'file': str(relative_path),
                        'functions': remote_functions
                    })
                
                # Analyze specific systems
                if 'money' in content.lower() or 'cash' in content.lower() or 'funds' in content.lower():
                    money_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['money', 'cash', 'funds', 'currency'])]
                    if money_lines:
                        exploits['money_systems'].append({
                            'file': str(relative_path),
                            'lines': money_lines[:5]  # First 5 relevant lines
                        })
                
                if 'walkspeed' in content.lower() or 'speed' in content.lower():
                    speed_lines = [line.strip() for line in content.split('\n') if 'speed' in line.lower()]
                    if speed_lines:
                        exploits['speed_systems'].append({
                            'file': str(relative_path),
                            'lines': speed_lines[:3]
                        })
                
                if 'cframe' in content.lower() or 'position' in content.lower():
                    teleport_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['cframe', 'position', 'teleport'])]
                    if teleport_lines:
                        exploits['teleport_systems'].append({
                            'file': str(relative_path),
                            'lines': teleport_lines[:3]
                        })
                
                if 'tool' in content.lower() or 'axe' in content.lower():
                    tool_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['tool', 'axe', 'equipment'])]
                    if tool_lines:
                        exploits['tool_systems'].append({
                            'file': str(relative_path),
                            'lines': tool_lines[:3]
                        })
                
                if 'admin' in content.lower() or 'zebraman' in content.lower():
                    admin_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['admin', 'mod', 'zebraman'])]
                    if admin_lines:
                        exploits['admin_systems'].append({
                            'file': str(relative_path),
                            'lines': admin_lines[:3]
                        })
                
                if 'save' in content.lower() or 'load' in content.lower():
                    save_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['save', 'load', 'slot'])]
                    if save_lines:
                        exploits['save_load_systems'].append({
                            'file': str(relative_path),
                            'lines': save_lines[:3]
                        })
                
                if 'property' in content.lower() or 'land' in content.lower():
                    property_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['property', 'land', 'plot'])]
                    if property_lines:
                        exploits['property_systems'].append({
                            'file': str(relative_path),
                            'lines': property_lines[:3]
                        })
                
                if 'wire' in content.lower() or 'electric' in content.lower():
                    wire_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['wire', 'electric', 'power'])]
                    if wire_lines:
                        exploits['wire_systems'].append({
                            'file': str(relative_path),
                            'lines': wire_lines[:3]
                        })
                
                if 'blueprint' in content.lower() or 'build' in content.lower():
                    blueprint_lines = [line.strip() for line in content.split('\n') if any(word in line.lower() for word in ['blueprint', 'build', 'structure'])]
                    if blueprint_lines:
                        exploits['blueprint_systems'].append({
                            'file': str(relative_path),
                            'lines': blueprint_lines[:3]
                        })
                        
        except Exception as e:
            print(f"Error analyzing {file_path}: {e}")
    
    # Print findings
    print("=== EXPLOIT ANALYSIS RESULTS ===\n")
    
    print(f"Remote Events Found: {len(exploits['remote_events'])}")
    for item in exploits['remote_events'][:5]:
        print(f"  {item['file']}: {item['events']}")
    
    print(f"\nRemote Functions Found: {len(exploits['remote_functions'])}")
    for item in exploits['remote_functions'][:5]:
        print(f"  {item['file']}: {item['functions']}")
    
    print(f"\nMoney Systems Found: {len(exploits['money_systems'])}")
    for item in exploits['money_systems'][:3]:
        print(f"  {item['file']}")
        for line in item['lines'][:2]:
            if line:
                print(f"    {line}")
    
    print(f"\nSpeed Systems Found: {len(exploits['speed_systems'])}")
    for item in exploits['speed_systems'][:3]:
        print(f"  {item['file']}")
    
    print(f"\nTeleport Systems Found: {len(exploits['teleport_systems'])}")
    for item in exploits['teleport_systems'][:3]:
        print(f"  {item['file']}")
    
    print(f"\nTool Systems Found: {len(exploits['tool_systems'])}")
    for item in exploits['tool_systems'][:3]:
        print(f"  {item['file']}")
    
    print(f"\nAdmin Systems Found: {len(exploits['admin_systems'])}")
    for item in exploits['admin_systems'][:3]:
        print(f"  {item['file']}")
        for line in item['lines'][:1]:
            if line and 'zebraman' in line.lower():
                print(f"    {line}")
    
    print(f"\nSave/Load Systems Found: {len(exploits['save_load_systems'])}")
    for item in exploits['save_load_systems'][:3]:
        print(f"  {item['file']}")
    
    return exploits

if __name__ == "__main__":
    root_dir = "/workspace/lumber_tycoon_rojo_project/place 13822889 Lumber Tycoon 2"
    exploits = analyze_exploits(root_dir)